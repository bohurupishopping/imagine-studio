-- Create designs table if it doesn't exist
create table if not exists designs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  image_url text not null,
  public_url text not null,
  prompt text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  text1 text,
  text2 text,
  font1 text,
  font2 text,
  color1 text,
  color2 text,
  size1 integer,
  size2 integer
);

-- Enable Row Level Security if not already enabled
alter table designs enable row level security;

-- Create policies for designs table
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Users can view their own designs'
  ) then
    create policy "Users can view their own designs"
    on designs for select
    using (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Users can insert their own designs'
  ) then
    create policy "Users can insert their own designs" 
    on designs for insert
    with check (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Users can update their own designs'
  ) then
    create policy "Users can update their own designs"
    on designs for update
    using (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Users can delete their own designs'
  ) then
    create policy "Users can delete their own designs"
    on designs for delete
    using (auth.uid() = user_id);
  end if;

  -- Admin policies
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Admins can view all designs'
  ) then
    create policy "Admins can view all designs"
    on designs for select
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Admins can insert designs'
  ) then
    create policy "Admins can insert designs"
    on designs for insert
    with check (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Admins can update any design'
  ) then
    create policy "Admins can update any design"
    on designs for update
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'designs' and policyname = 'Admins can delete any design'
  ) then
    create policy "Admins can delete any design"
    on designs for delete
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;
end $$;

-- Create index if not exists
do $$
begin
  if not exists (
    select 1 from pg_indexes
    where tablename = 'designs' and indexname = 'idx_designs_user_id'
  ) then
    create index idx_designs_user_id on designs (user_id);
  end if;
end $$;

-- Create trigger to automatically update updated_at timestamp if not already exists
do $$
begin
  if not exists (
    select 1 from information_schema.triggers
    where event_object_table = 'designs' and trigger_name = 'handle_updated_at'
  ) then
    create extension if not exists moddatetime;

    create trigger handle_updated_at before update on designs
      for each row execute procedure moddatetime(updated_at);
  end if;
end $$;
