-- Create orders table if it doesn't exist
create table if not exists orders (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  design_id bigint references designs(id) not null,
  public_url text not null,
  text1 text not null,
  text2 text,
  font1 text not null,
  font2 text,
  color1 text not null,
  color2 text,
  size1 integer not null,
  size2 integer,

  -- WooCommerce order fields
  woocommerce_id bigint not null,
  woocommerce_parent_id bigint,
  woocommerce_number text not null,
  woocommerce_status text not null,
  woocommerce_date_created timestamp with time zone not null,
  woocommerce_total numeric not null,

  -- Billing info
  billing_first_name text not null,
  billing_last_name text not null,
  billing_email text not null,
  billing_phone text not null,

  -- Line items
  line_item_id bigint not null,
  line_item_name text not null,
  line_item_product_id bigint not null,
  line_item_variation_id bigint,
  line_item_quantity integer not null check (line_item_quantity > 0),
  line_item_price numeric not null check (line_item_price >= 0),
  line_item_subtotal numeric not null check (line_item_subtotal >= 0),
  line_item_total numeric not null check (line_item_total >= 0),
  line_item_sku text,
  line_item_meta_data jsonb,
  status text not null default 'pending',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security if not already enabled
alter table orders enable row level security;

-- Create policies for orders table
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Users can view their own orders'
  ) then
    create policy "Users can view their own orders"
    on orders for select
    using (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Users can insert their own orders'
  ) then
    create policy "Users can insert their own orders" 
    on orders for insert
    with check (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Users can update their own orders'
  ) then
    create policy "Users can update their own orders"
    on orders for update
    using (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Users can delete their own orders'
  ) then
    create policy "Users can delete their own orders"
    on orders for delete
    using (auth.uid() = user_id);
  end if;

  -- Admin policies
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Admins can view all orders'
  ) then
    create policy "Admins can view all orders"
    on orders for select
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Admins can insert orders'
  ) then
    create policy "Admins can insert orders"
    on orders for insert
    with check (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Admins can update any order'
  ) then
    create policy "Admins can update any order"
    on orders for update
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'orders' and policyname = 'Admins can delete any order'
  ) then
    create policy "Admins can delete any order"
    on orders for delete
    using (
      exists (
        select 1 from profiles
        where profiles.user_id = auth.uid()
        and profiles.role = 'admin'
      )
    );
  end if;
end $$;

-- Create index if not exists
do $$
begin
  if not exists (
    select 1 from pg_indexes
    where tablename = 'orders' and indexname = 'idx_orders_user_id'
  ) then
    create index idx_orders_user_id on orders (user_id);
  end if;
end $$;

-- Create trigger if not exists
do $$
begin
  if not exists (
    select 1 from information_schema.triggers
    where event_object_table = 'orders' and trigger_name = 'handle_updated_at'
  ) then
    create extension if not exists moddatetime;

    create trigger handle_updated_at before update on orders
      for each row execute procedure moddatetime(updated_at);
  end if;
end $$;
